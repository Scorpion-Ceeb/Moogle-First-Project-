private string[] Contains(string[] wordsToFind, Searcher searcher){
        //Revisar en "info" si la palabras con o sin operadores se encuentran en los documentos
        #region variables
        List<string> tempPaths = new List<string>(searcher.Paths);

        List<string> tempWordsToFind = new List<string>(wordsToFind);

        searcher.WordsMask = new bool[wordsToFind.Length];
        searcher.WordsList = new string[wordsToFind.Length];

        Array.Copy(wordsToFind, searcher.WordsList, searcher.WordsList.Length);
        #endregion

        //Reviso las palabras que contengan operadores de existencia en los documentos para eliminar
        //el documento de la busqueda si existe la palabra o no dependiendo del operador(!, ^)
        tempWordsToFind = CommonWords(tempWordsToFind, searcher.Paths, searcher.Info);
        if(searcher.Operators==null)
        {
            for (int i = 0; i < wordsToFind.Length; i++)
            {
                if(NoExistsWord(wordsToFind[i], searcher.Paths, tempWordsToFind, searcher.Info)) 
                    searcher.WordsMask[i] = true;
            }
        }
        else{
            List<Operator> newOper = new List<Operator>(searcher.Operators);
            Operator? oper = Operator.ReturnOperator('~', searcher.Operators);
            newOper.Remove(oper);
            for (int i = 0; i < wordsToFind.Count(); i++)
            {
                // Deben estar las dos palabras del operador distancia
                if(Operator.ContainsOperator(wordsToFind[i], '~', searcher.Operators) && NoExistsWord(wordsToFind[i], searcher.Paths, tempWordsToFind, searcher.Info)){
                    
                    //Si no se encuentra alguna de las dos perdera el operador de distancia
                    for (int j = 0; j < oper?.WordAndTimes.Count(); j++)
                    {
                        for (int k = 0; k < oper.WordAndTimes[j].Count(); k++)
                        {
                            if(oper.WordAndTimes[j][k].Word == wordsToFind[i]){
                                searcher.WordsMask[i] = true;
                                oper.WordAndTimes.RemoveAt(j);
                                break;
                            }
                        }
                    }
                    if(oper?.WordAndTimes.Count()==0) oper = null;
                }
                else if(Operator.ContainsOperator(wordsToFind[i], '!', searcher.Operators)){
                    //Remueve el path y la palabra que contenga el operador !(Porque ya se cumple la funcion)
                    for (int j = 0; j < searcher.Paths.Length; j++)
                    {
                        if(searcher.Info[searcher.Paths[j]].ContainsKey(wordsToFind[i].ToLower()))
                            tempPaths.Remove(searcher.Paths[j]);
                    }
                    tempWordsToFind.Remove(wordsToFind[i]);
                }
                else if(Operator.ContainsOperator(wordsToFind[i], '^', searcher.Operators)){
                    //Remueve el path que no contenga la palbra del operador ^
                    for (int j = 0; j < searcher.Paths.Length; j++){
                        if(!searcher.Info[searcher.Paths[j]].ContainsKey(wordsToFind[i]))
                            tempPaths.Remove(searcher.Paths[j]);
                    }
                }
                else if(Operator.ContainsOperator(wordsToFind[i], '*', searcher.Operators)){
                    if(NoExistsWord(wordsToFind[i], searcher.Paths, tempWordsToFind, searcher.Info)) 
                        searcher.WordsMask[i] = true;
                }
                else{
                    if(NoExistsWord(wordsToFind[i], searcher.Paths, tempWordsToFind, searcher.Info)) 
                        searcher.WordsMask[i] = true;
                }
            }
            if(oper != null){
                newOper.Add(oper);
                Operator.SearchDistance(searcher.Paths, searcher.Info, searcher.Texts, searcher.Operators);
            }
            searcher.Operators = newOper.ToArray();
        }

        searcher.Paths = tempPaths.ToArray();
        wordsToFind = tempWordsToFind.ToArray();
        return  wordsToFind;
    }
    private List<string> CommonWords(List<string> wordsToFind, string[] paths, AllTextsInfo info){
        //Chequea si en la List exiten palabras comunes(IDF=0)
        //Las elimina de la busqueda
        List<string> tempWordsToFind = new List<string>(wordsToFind);
        for (int i = 0; i < tempWordsToFind.Count(); i++)
        {
            for (int j = 0; j < paths.Length; j++)
            {
                if(info[paths[j]].ContainsKey(tempWordsToFind[i]) && 
                    info[paths[j]][tempWordsToFind[i]].TimesInCorpus == info.Keys.Count() || tempWordsToFind[i] == "")
                {
                    wordsToFind.Remove(tempWordsToFind[i]);
                }
            }
        }
        return wordsToFind;
    }
    private bool NoExistsWord(string word, string[] paths, List<string> wordsCopy, AllTextsInfo info){
        //Devuelve True o False dependiendo si la palabra no exite o si en el corpus
        int count = 0;
        int i = 0;
        while(count == 0 && i < paths.Length){
            if(info[paths[i++]].ContainsKey(word)){
                count++;
            }
        }
        if(count==0){
            wordsCopy.Remove(word);
            return true;
        }
        return false;
    }
}




/* public static int OperatorDistance(AllTextsInfo info, string word, string path, Operator[] operators)
    {
        //Calcula la distancia entre los pares de palabras del operador de distancia
        Operator? oper = Operator.ReturnOperator('~', operators);
        int distance= int.MaxValue;
        string secondWord = "";
        bool found = false;

        for (int i = 0; i < oper.WordAndTimes.Count(); i++)
        {
            for (int j = 0; j < oper.WordAndTimes[i].Count(); j++)
            {
                if((oper.WordAndTimes[i].Contains((word.ToLower(), 1)) && (secondWord = oper.WordAndTimes[i][j].Word) != word.ToLower())){
                    found= true;
                    break;
                }
            }
            if(found)break;
        }

        if(!info[path].ContainsKey(secondWord.ToLower())) return -1;

        for (int i = 0; i < info[path][word.ToLower()].Indexes.Count(); i++)
        {
            for (int j = 0; j < info[path][secondWord.ToLower()].Indexes.Count(); j++)
            {
                int temp = Math.Abs(info[path][word.ToLower()].Indexes[i] - info[path][secondWord.ToLower()].Indexes[j]);
                distance = temp < distance? temp : distance;
            }
        }
        return distance;
    } */



public static bool ContainsOperator(string word, char oper, Operator[] operators){

        if(operators == null) return false;
        //Revisar si la palabra contiene algun tipo de operador

        for (int i = 0; i < operators.Length; i++)
        {
            for (int j = 0; j < operators[i].WordAndTimes.Count(); j++)
            {
                for (int k = 0; k < operators[i].WordAndTimes[j].Count(); k++)
                {
                    if((oper == operators[i].OperatorCharacter) && (word.ToLower()==operators[i].WordAndTimes[j][k].Word.ToLower())){
                        return true;
                    }
                }
            }
        }
        return false;
    }






            /* if(wordsQuery[i] == "~" && i != wordsQuery.Length - 1 && wordsQuery[i+1].Any(word => char.IsLetterOrDigit(word)) && Operator.CleanWord(wordsQuery[i+1]).ToLower() != words.Last()){
                int distanceOp = 0;
                Operator.AddDistanceOperator(operators, words.Last(), Operator.CleanWord(wordsQuery[i+1]).ToLower(), distanceOp++);
            } */



            /* public static Operator[] RemoveOperatorsNotDistance(Operator[] operators){
        //Elimina los operadores que las palabras el operador de ditancia contenga
        Operator? distanceOper = ReturnOperator('~', operators);

        if(distanceOper == null) return operators;

        List<Operator> newOperators = new List<Operator>(operators);

        for (int k = 0; k < distanceOper.WordAndTimes.Count(); k++)
        {
            if(newOperators.Count()==0) break;

            for (int h = 0; h < distanceOper.WordAndTimes[k].Count(); h++)
            {
                for (int i = 0; i < operators.Length; i++)
                {
                    if(operators[i].OperatorCharacter == '~' || operators[i].OperatorCharacter == '*') continue;

                    for (int j = 0; j < operators[i].WordAndTimes.Count(); j++)
                    {
                        if(operators[i].WordAndTimes[j].Contains((distanceOper.WordAndTimes[k][h].Word, 1))){
                            newOperators[i].WordAndTimes[j].Remove((distanceOper.WordAndTimes[k][h].Word, 1));
                            if(newOperators[i].WordAndTimes[j].Count()==0)
                                newOperators.Remove(operators[i]);
                        }
                    }
                }
            }
        }
        return newOperators.ToArray();
    } */
    /* public static void AddDistanceOperator(List<Operator> operators, string firstWord, string secondWord ,int group){
        //Anade los pares de palabras del operador de distancia 
        if(!operators.Exists(j=>j.OperatorCharacter == '~')){
            operators.Add(new Operator('~', new List<List<(string Word, int Times)>>(){ new List<(string Word, int Times)>(){ new ( firstWord, 1), new (secondWord, 1)}}));
        }
        else{
            for (int h = 0; h < operators.Count(); h++)
            {   
                if(operators[h].OperatorCharacter == '~'){
                    operators[h].WordAndTimes.Add(new List<(string Word, int Times)>(){new (firstWord, 1), new (secondWord, 1)});
                }
            }
        }
    } */




       /*  
    public static int OperatorsTimes(string word, char operChar, Operator[] operators){

        //Revisar cuantas veces se repite el operador '*' en la palabra correspondiente

        for (int i = 0; i < operators.Length; i++)
        {
            for (int j = 0; j < operators[i].WordAndTimes.Count(); j++)
            {
                for (int k = 0; k < operators[i].WordAndTimes[j].Count(); k++)
                {
                    if((operChar == operators[i].OperatorCharacter) && (word.ToLower()==operators[i].WordAndTimes[j][k].Word.ToLower())){
                        return operators[i].WordAndTimes[j][k].Times;
                    }
                }
            }
        }
        return 0;
    }  */
    /* public static void SearchDistance(string[] paths, AllTextsInfo info, TextsPerDoc textPerDoc, Operator[] operators){
        //Metodo para buscar para realizar la accion del operador de cercania
        //Calculando la menor distancia entre las palabra escritas por el usaurio en el texto
        Operator? operDistance = Operator.ReturnOperator('~', operators);

        foreach (string path in paths)
        {
            for(int i = 0; i <  operDistance?.WordAndTimes.Count(); i++)
            {
                for (int j = 0; j < operDistance.WordAndTimes[i].Count(); j++)
                {   
                    if(info[path].ContainsKey(operDistance.WordAndTimes[i][j].Word)){
                        int distance = Operator.OperatorDistance(info, operDistance.WordAndTimes[i][j].Word, path, operators);
                        if(distance != -1){
                            info[path][operDistance.WordAndTimes[i][j].Word].PlusValue = (((float)textPerDoc[path].Count() - 
                                        distance)/(float)textPerDoc[path].Count()) * 2;
                        }
                    }
                }
            }
        }
    } */